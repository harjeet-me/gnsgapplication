
// an ignored comment
/** not an ignored comment */
entity Program {
	programType EVENTTYPE ,
    location EVENTLOCATION
    etime Instant,
    family String,
    phoneNumber String,
    address String ,
    withLangar Boolean,
    langarMenu LANGARMENU ,
    langarTime Instant ,
    dueAmt Double,
    paidAmt Double,
    balAmt Double,
    recieptNumber Long,
    remark String ,
    bookingDate Instant,
    status EventStatus,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String

    
}

entity DailyProgramReport {
    programType EVENTTYPE ,
   	startDate LocalDate,
    endDate LocalDate ,
    report Blob,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}

enum PROGTYPE{
  SEHAJ_PATH , AKHAND_PATH 
}

entity PathReport {
    pathType PROGTYPE ,
   	startDate LocalDate,
    endDate LocalDate ,
    report Blob,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}

entity ASProgram {
    program PROGTYPE ,
	family String,
    phoneNumber String,
    address String ,
    startDate LocalDate ,
    endDate LocalDate,
    remark String ,
    bookingDate Instant,
    desc String ,
    status EventStatus,
     createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String

    
}
enum EXPTYPE{
INVOICE , RECIEPT , VOUCHER
}

enum REVTYPE{
PROGRAM , GOLAK , SEHAJ_PATH_BHETA
}

entity ExpenseReport {
    expType  EXPTYPE ,
	startDate LocalDate,
    endDate LocalDate ,
    report Blob,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}


entity Expense {
    expType  EXPTYPE ,
	amt Double ,
    date LocalDate ,
    desc String ,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}

entity Vendor {
    name  String ,
	createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}
entity Revenue {
    revType  REVTYPE ,
	amt Double ,
    date LocalDate ,
    desc String ,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}

entity RevenueReport {
    revType  REVTYPE ,
	startDate LocalDate,
    endDate LocalDate ,
    report Blob,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String 
}


enum EventStatus{
   BOOKED , COMPLETED , CANCELLED , REQUESTED , PAID
}

enum ROULTIME{
   T10_12 , COMPLETED , CANCELLED , REQUESTED , PAID
}
enum LANGARMENU {
SIMPLE_JALEBI_SHAHIPANEER ,
SIMPLE_JALEBI_MATARPANEER ,
SIMPLE_KHEER_SHAHIPANEER ,
SIMPLE_KHEER_MATARPANEER,
SIMPLE_JALEBI_PALAKPANEER ,
SIMPLE_KHEER_PALAKPANEER ,
PAKOURE,
JALEBI,
KHEER
}
enum EVENTLOCATION{
HALL_2 , HALL_3 , GALLERY_UPSTAIRS , MAIN_HALL, HOME , GNSG_SENIOR_CENTER
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String ,
    taskTime Instant
}

/**
 * The Employee entity.
 */
entity Sevadar {
	/**
	* The firstname attribute.
	*/
	name String,
	email String,
	phoneNumber String,
    address String ,
    sevaStartDate Instant,
    sevaEndDate Instant,
	isValid Boolean,
     createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String
}



entity PRoul {
	/**
	* The firstname attribute.
	*/
    pathName String
	desc String,
	totalRoul Double ,
    totalAmt Double ,
    bhogDate LocalDate ,
    createdDate Instant ,
    createdBy String ,
    lastModifiedDate Instant ,
    lastModifiedBy String
	
}
enum EVENTTYPE {
    SUKHMANI_SAHIB, 
    SUKHMANI_SAHIB_AT_HOME,
    FUNERAL_SEHAJ_PATH_BHOG, 
    AKHAND_PATH_SAHIB ,
    SEHAJ_PATH_START , 
    LANGAR ,
    KIRTAN,
    SEHAJ_PATH_BHOG ,
    DEG_SEVA
}

// defining multiple OneToMany relationships with comments
 relationship OneToMany {
   //Sevadar  to   Program {sevadar(name)}
    Vendor  to   Expense {vendor(name)}
    Sevadar  to   Program {sevadar(name)}
    ASProgram to  PRoul {prog(desc)} 
      //Sevadar  to   SehajPath {granthi(name)}
   }

 relationship OneToOne {
    PRoul {pathi(name)} to     Sevadar 
  
   
   
   }


// Set pagination options

paginate PRoul , Task , ASProgram , Program , Sevadar with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
