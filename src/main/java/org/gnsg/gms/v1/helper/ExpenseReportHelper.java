package org.gnsg.gms.v1.helper;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.gnsg.gms.domain.Expense;
import org.gnsg.gms.domain.ExpenseReport;
import org.gnsg.gms.domain.enumeration.EXPTYPE;
import org.gnsg.gms.repository.ExpenseRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class ExpenseReportHelper {
    @Autowired
    ExpenseRepository expenseRepository;

    private final Logger log = LoggerFactory.getLogger(ExpenseReportHelper.class);

    public ExpenseReport generateExpenseReport(ExpenseReport expenseReport) {
        List<Expense> expenses = null;
        if (expenseReport != null && expenseReport.getExpType() == (EXPTYPE.ALL)) {
            expenses = expenseRepository.findByDateBetween(expenseReport.getStartDate(), expenseReport.getEndDate());
        } else {
            expenses =
                expenseRepository.findByExpTypeAndDateBetween(
                    expenseReport.getExpType(),
                    expenseReport.getStartDate(),
                    expenseReport.getEndDate()
                );
        }
        log.warn("json object found   " + expenses);
        String json = CsvHelper.ListJson(expenses);

        if (json == null) {
            log.warn("json object found ==null   ");
        } else {
            double sum = expenses.stream().mapToDouble(Expense::getAmt).sum();

            ReportObj reportObj = new ReportObj("Expense Report  ", expenseReport.getStartDate(), expenseReport.getEndDate(), sum);
            final Map<String, String> testMap = new LinkedHashMap<String, String>();
            testMap.put("DATE ", LocalDate.now().toString());
            testMap.put("REPORT TYPE", reportObj.getReportType());
            testMap.put("FROM DATE", reportObj.getStartDate().toString());
            testMap.put("TO DATE", reportObj.getEndDate().toString());
            testMap.put(" TOTAL Expense", reportObj.getReportTotal().toString());
            testMap.put("GENERATED BY ", reportObj.getReportType());
            byte[] generatedPdf = CsvToPdfConverter.csvToPdfConverter(json.getBytes(), reportObj, testMap);

            if (generatedPdf == null) {
                log.warn("generatedPdf==null   ");
            } else {
                expenseReport.setReport(generatedPdf);
                expenseReport.setReportContentType("application/pdf");
            }
        }

        return expenseReport;
    }
}
